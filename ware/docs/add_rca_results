
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2015  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.5+ (git sha1 f13e387, gcc 5.2.1-22ubuntu2 -O2 -fstack-protector-strong -fPIC -Os)


-- Parsing `add_rca.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `add_rca.v' to AST representation.
Generating RTLIL representation for module `\add_rca'.
Successfully finished Verilog frontend.

-- Running command `proc ; memory; opt ;  techmap -D ALU_RIPPLE;; opt -fast ;; abc -D 100 -liberty ./NanGate_15nm_OCL_typical_conditional_nldm.lib  -constr ./NanGate_15nm_OCL_typical_conditional_nldm.constr; stat' --

2. Executing PROC pass (convert processes to netlists).

2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3. Executing PROC_INIT pass (extract init attributes).

2.4. Executing PROC_ARST pass (detect async resets in processes).

2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\add_rca.$proc$add_rca.v:34$65'.
  creating decoder for signal `$0\carry[0:0]'.

2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\add_rca.\carry' from process `\add_rca.$proc$add_rca.v:34$65'.

2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `add_rca.$proc$add_rca.v:34$65'.
Cleaned up 0 empty switches.

3. Executing MEMORY pass.

3.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_rca..

3.3. Executing MEMORY_SHARE pass (consolidating $memrc/$memwr cells).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_rca..

3.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_CONST pass (perform const folding).

4.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\add_rca'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \add_rca..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_rca.
Performed a total of 0 changes.

4.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\add_rca'.
Removed a total of 0 cells.

4.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_rca..

4.8. Executing OPT_CONST pass (perform const folding).

4.9. Finished OPT passes. (There is nothing left to do.)

5. Executing TECHMAP pass (map to technology primitives).

5.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
No more expansions possible.

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_CONST pass (perform const folding).

6.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\add_rca'.
Removed a total of 0 cells.

6.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_rca..

6.5. Finished fast OPT passes.

7. Executing ABC pass (technology mapping using ABC).

7.1. Extracting gate netlist of module `\add_rca' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8. Printing statistics.

=== add_rca ===

   Number of wires:                  7
   Number of wire bits:            260
   Number of public wires:           7
   Number of public wire bits:     260
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     full_adder                     64

End of script. Logfile hash: 87b86c7478
CPU: user 0.04s system 0.00s, MEM: 34.90 MB total, 8.53 MB resident
Yosys 0.5+ (git sha1 f13e387, gcc 5.2.1-22ubuntu2 -O2 -fstack-protector-strong -fPIC -Os)
Time spent: 49% 2x read_verilog (0 sec), 24% 4x opt_clean (0 sec), ...
