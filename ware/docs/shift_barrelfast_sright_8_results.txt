
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2015  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.5+ (git sha1 f13e387, gcc 5.2.1-22ubuntu2 -O2 -fstack-protector-strong -fPIC -Os)


-- Parsing `shift_barrelfast_sright.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `shift_barrelfast_sright.v' to AST representation.
Generating RTLIL representation for module `\shift_barrelfast_sright'.
Successfully finished Verilog frontend.

-- Running command `proc ; opt ;  techmap -D ALU_RIPPLE;; opt -fast ;; abc -D 100 -liberty ./NanGate_15nm_OCL_typical_conditional_nldm.lib  -constr ./NanGate_15nm_OCL_typical_conditional_nldm.constr; stat' --

2. Executing PROC pass (convert processes to netlists).

2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$shift_barrelfast_sright.v:37$12 in module shift_barrelfast_sright.
Removed a total of 1 dead cases.

2.3. Executing PROC_INIT pass (extract init attributes).

2.4. Executing PROC_ARST pass (detect async resets in processes).

2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:37$12'.
  creating decoder for signal `$0$mem2reg_rd$$shift_barrelfast_sright.v:38$9_ADDR[2:0]$13'.
  creating decoder for signal `$0$mem2reg_rd$$shift_barrelfast_sright.v:38$9_DATA[7:0]$14'.
  creating decoder for signal `$0\b[7:0]'.
  creating decoder for signal `$1$mem2reg_rd$$shift_barrelfast_sright.v:38$9_DATA[7:0]$15'.
Creating decoders for process `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:18$10'.
  creating decoder for signal `$0\temp[7:0]'.
  creating decoder for signal `$1\temp[7:0]'.

2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\shift_barrelfast_sright.\b' from process `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:37$12'.
No latch inferred for signal `\shift_barrelfast_sright.$mem2reg_rd$$shift_barrelfast_sright.v:38$9_ADDR' from process `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:37$12'.
No latch inferred for signal `\shift_barrelfast_sright.$mem2reg_rd$$shift_barrelfast_sright.v:38$9_DATA' from process `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:37$12'.
No latch inferred for signal `\shift_barrelfast_sright.\temp' from process `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:18$10'.

2.7. Executing PROC_DFF pass (convert process syncs to FFs).

2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:37$12'.
Removing empty process `shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:37$12'.
Found and cleaned up 1 empty switch in `\shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:18$10'.
Removing empty process `shift_barrelfast_sright.$proc$shift_barrelfast_sright.v:18$10'.
Cleaned up 2 empty switches.

3. Executing OPT pass (performing simple optimizations).

3.1. Executing OPT_CONST pass (perform const folding).
Replacing $eq cell `$eq$shift_barrelfast_sright.v:19$11' in module `shift_barrelfast_sright' with inverter.
Replacing $eq cell `$procmux$48_CMP0' in module `shift_barrelfast_sright' with $logic_not.
Optimizing away select inverter for $mux cell `$procmux$52' in module `shift_barrelfast_sright'.

3.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\shift_barrelfast_sright'.
Removed a total of 0 cells.

3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \shift_barrelfast_sright..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$41 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shift_barrelfast_sright.
Performed a total of 0 changes.

3.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\shift_barrelfast_sright'.
Removed a total of 0 cells.

3.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shift_barrelfast_sright..
  removing unused `$not' cell `$eq$shift_barrelfast_sright.v:19$11'.

3.8. Executing OPT_CONST pass (perform const folding).

3.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \shift_barrelfast_sright..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$41 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \shift_barrelfast_sright.
Performed a total of 0 changes.

3.12. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\shift_barrelfast_sright'.
Removed a total of 0 cells.

3.13. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shift_barrelfast_sright..

3.15. Executing OPT_CONST pass (perform const folding).

3.16. Finished OPT passes. (There is nothing left to do.)

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping shift_barrelfast_sright.$procmux$42_CMP0 ($eq) with simplemap.

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 8
Parameter \S_WIDTH = 7
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=8\S_WIDTH=7'.

4.3. Continuing TECHMAP pass.
Mapping shift_barrelfast_sright.$procmux$41 using $paramod\_90_pmux\WIDTH=8\S_WIDTH=7.
Mapping shift_barrelfast_sright.$procmux$43_CMP0 ($eq) with simplemap.
Mapping shift_barrelfast_sright.$procmux$44_CMP0 ($eq) with simplemap.
Mapping shift_barrelfast_sright.$procmux$45_CMP0 ($eq) with simplemap.
Mapping shift_barrelfast_sright.$procmux$46_CMP0 ($eq) with simplemap.
Mapping shift_barrelfast_sright.$procmux$47_CMP0 ($eq) with simplemap.
Mapping shift_barrelfast_sright.$procmux$48_CMP0 ($logic_not) with simplemap.
Mapping shift_barrelfast_sright.$procmux$52 ($mux) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$126 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$127 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$125 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$124 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$123 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$122 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$121 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:441$120 ($reduce_or) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$119 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$118 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$117 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$116 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$115 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$114 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$and$<techmap.v>:434$113 ($and) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$ternary$<techmap.v>:445$112 ($mux) with simplemap.
Mapping shift_barrelfast_sright.$techmap$procmux$41.$reduce_or$<techmap.v>:445$111 ($reduce_or) with simplemap.
No more expansions possible.
Removed 1 unused cells and 30 unused wires.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_CONST pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$100' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$98 [0] = \sh [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$131' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$128 [1] = \sh [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$143' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$141 [0] = \sh [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$144' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$141 [1] = \sh [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$158' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$154 [2] = \sh [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$169' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$167 [0] = \sh [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$171' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$167 [2] = \sh [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$183' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$180 [1] = \sh [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$184' (?0) in module `\shift_barrelfast_sright' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$180 [2] = \sh [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$199' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [1] = \a [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$198' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [0] = \a [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$200' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [2] = \a [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$201' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [3] = \a [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$202' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [4] = \a [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$203' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [5] = \a [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$204' (01?) in module `\shift_barrelfast_sright' with constant driver `\temp [6] = \a [7]'.

5.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$132' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$102'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$128 [2] = $auto$simplemap.cc:250:simplemap_eqne$98 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$132' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$145' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$102'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$141 [2] = $auto$simplemap.cc:250:simplemap_eqne$98 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$145' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$156' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$130'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$154 [0] = $auto$simplemap.cc:250:simplemap_eqne$128 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$156' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$157' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$101'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$154 [1] = $auto$simplemap.cc:250:simplemap_eqne$98 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$157' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$149' is identical to cell `$auto$simplemap.cc:177:logic_reduce$194'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$148 = $auto$simplemap.cc:168:logic_reduce$193
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$149' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$170' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$101'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$167 [1] = $auto$simplemap.cc:250:simplemap_eqne$98 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$170' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$182' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$130'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$180 [0] = $auto$simplemap.cc:250:simplemap_eqne$128 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$182' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$175' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$106'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$174 = $auto$simplemap.cc:127:simplemap_reduce$105
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$175' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$293' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$292'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$118_Y [7] = $techmap$procmux$41.$and$<techmap.v>:434$118_Y [6]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$293' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$300' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$299'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$117_Y [6] = $techmap$procmux$41.$and$<techmap.v>:434$117_Y [5]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$300' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$301' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$299'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$117_Y [7] = $techmap$procmux$41.$and$<techmap.v>:434$117_Y [5]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$301' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$307' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$306'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$116_Y [5] = $techmap$procmux$41.$and$<techmap.v>:434$116_Y [4]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$307' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$308' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$306'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$116_Y [6] = $techmap$procmux$41.$and$<techmap.v>:434$116_Y [4]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$308' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$309' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$306'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$116_Y [7] = $techmap$procmux$41.$and$<techmap.v>:434$116_Y [4]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$309' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$314' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$313'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$115_Y [4] = $techmap$procmux$41.$and$<techmap.v>:434$115_Y [3]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$314' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$315' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$313'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$115_Y [5] = $techmap$procmux$41.$and$<techmap.v>:434$115_Y [3]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$315' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$316' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$313'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$115_Y [6] = $techmap$procmux$41.$and$<techmap.v>:434$115_Y [3]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$316' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$317' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$313'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$115_Y [7] = $techmap$procmux$41.$and$<techmap.v>:434$115_Y [3]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$317' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$321' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$320'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$114_Y [3] = $techmap$procmux$41.$and$<techmap.v>:434$114_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$321' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$322' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$320'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$114_Y [4] = $techmap$procmux$41.$and$<techmap.v>:434$114_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$322' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$323' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$320'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$114_Y [5] = $techmap$procmux$41.$and$<techmap.v>:434$114_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$323' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$324' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$320'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$114_Y [6] = $techmap$procmux$41.$and$<techmap.v>:434$114_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$324' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$325' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$320'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$114_Y [7] = $techmap$procmux$41.$and$<techmap.v>:434$114_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$325' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$328' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$113_Y [2] = $techmap$procmux$41.$and$<techmap.v>:434$113_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$328' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$329' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$113_Y [3] = $techmap$procmux$41.$and$<techmap.v>:434$113_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$329' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$330' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$113_Y [4] = $techmap$procmux$41.$and$<techmap.v>:434$113_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$330' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$331' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$113_Y [5] = $techmap$procmux$41.$and$<techmap.v>:434$113_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$331' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$332' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$113_Y [6] = $techmap$procmux$41.$and$<techmap.v>:434$113_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$332' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$333' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $techmap$procmux$41.$and$<techmap.v>:434$113_Y [7] = $techmap$procmux$41.$and$<techmap.v>:434$113_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$333' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$136' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$188'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$135 = $auto$simplemap.cc:127:simplemap_reduce$187
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$136' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$216' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$207'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$215 [0] = $auto$simplemap.cc:127:simplemap_reduce$206 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$216' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$217' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$208'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$215 [1] = $auto$simplemap.cc:127:simplemap_reduce$206 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$217' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$218' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$209'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$215 [2] = $auto$simplemap.cc:127:simplemap_reduce$206 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$218' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$220' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$211'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$219 [0] = $auto$simplemap.cc:127:simplemap_reduce$210 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$220' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$225' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$207'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$224 [0] = $auto$simplemap.cc:127:simplemap_reduce$206 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$225' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$226' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$208'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$224 [1] = $auto$simplemap.cc:127:simplemap_reduce$206 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$226' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$229' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$211'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$228 [0] = $auto$simplemap.cc:127:simplemap_reduce$210 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$229' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$234' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$207'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$233 [0] = $auto$simplemap.cc:127:simplemap_reduce$206 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$234' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$235' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$208'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$233 [1] = $auto$simplemap.cc:127:simplemap_reduce$206 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$235' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$238' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$211'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$237 [0] = $auto$simplemap.cc:127:simplemap_reduce$210 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$238' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$243' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$207'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$242 [0] = $auto$simplemap.cc:127:simplemap_reduce$206 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$243' from module `\shift_barrelfast_sright'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$252' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$207'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$251 [0] = $auto$simplemap.cc:127:simplemap_reduce$206 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$252' from module `\shift_barrelfast_sright'.
Removed a total of 42 cells.

5.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \shift_barrelfast_sright..

5.5. Finished fast OPT passes.

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\shift_barrelfast_sright' to `<abc-temp-dir>/input.blif'..
Extracted 106 gates and 118 wires to a netlist network with 11 inputs and 8 outputs.

6.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/cmpe125/synth/./NanGate_15nm_OCL_typical_conditional_nldm.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRNQ_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSNQ_X1".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLTIE" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "FILL_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "FILL_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "FILL_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "FILL_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "FILL_X16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LHQ_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRNQ_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFSNQ_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Library "NanGate_15nm_OCL" from "/home/cmpe125/synth/./NanGate_15nm_OCL_typical_conditional_nldm.lib" has 57 cells (19 skipped: 5 seq; 6 tri-state; 8 no func).  Time =     0.06 sec
ABC: Memory =    2.98 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + read_constr -v /home/cmpe125/synth/./NanGate_15nm_OCL_typical_conditional_nldm.constr 
ABC: Setting driving cell to be "BUF_X2".
ABC: Setting driving cell to be 10.000000.
ABC: + strash 
ABC: + scorr 
ABC: Error: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime -D 100 
ABC: + strash 
ABC: + dch -f 
ABC: + map -D 100 
ABC: + buffer 
ABC: + upsize -D 100 
ABC: Current delay (30.85 ps) does not exceed the target delay (100.00 ps). Upsizing is not performed.
ABC: + dnsize -D 100 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     89 ( 11.2 %)   Cap =  2.1 ff (  2.5 %)   Area =       17.50 ( 94.4 %)   Delay =    33.75 ps  ( 27.0 %)               
ABC: Path  0 --       2 : 0    6 pi       A =   0.00  Df =   2.1   -0.1 ps  S =   4.0 ps  Cin =  0.0 ff  Cout =   4.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      33 : 1    5 INV_X1   A =   0.15  Df =   6.3   -0.1 ps  S =   5.8 ps  Cin =  0.8 ff  Cout =   4.0 ff  Cmax = 100.0 ff  G =  479  
ABC: Path  2 --      41 : 2    2 NOR2_X1  A =   0.20  Df =  10.2   -1.1 ps  S =   5.4 ps  Cin =  0.8 ff  Cout =   1.6 ff  Cmax = 100.0 ff  G =  200  
ABC: Path  3 --      42 : 1    2 INV_X1   A =   0.15  Df =  13.0   -1.3 ps  S =   3.2 ps  Cin =  0.8 ff  Cout =   1.6 ff  Cmax = 100.0 ff  G =  197  
ABC: Path  4 --      43 : 2    2 NOR2_X1  A =   0.20  Df =  16.9   -2.5 ps  S =   5.2 ps  Cin =  0.8 ff  Cout =   1.6 ff  Cmax = 100.0 ff  G =  217  
ABC: Path  5 --      44 : 1    2 INV_X1   A =   0.15  Df =  19.3   -2.5 ps  S =   2.8 ps  Cin =  0.8 ff  Cout =   1.5 ff  Cmax = 100.0 ff  G =  166  
ABC: Path  6 --      48 : 2    1 NAND2_X1 A =   0.20  Df =  21.1   -2.1 ps  S =   2.8 ps  Cin =  0.8 ff  Cout =   0.7 ff  Cmax = 100.0 ff  G =   92  
ABC: Path  7 --      54 : 2    1 NOR2_X1  A =   0.20  Df =  22.9   -1.2 ps  S =   3.4 ps  Cin =  0.8 ff  Cout =   0.8 ff  Cmax = 100.0 ff  G =  108  
ABC: Path  8 --      55 : 2    1 NAND2_X1 A =   0.20  Df =  33.7   -0.6 ps  S =  21.9 ps  Cin =  0.8 ff  Cout =  10.0 ff  Cmax = 100.0 ff  G = 1332  
ABC: Start-point = pi01.  End-point = po0.
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:        3
ABC RESULTS:            BUF_X2 cells:        1
ABC RESULTS:            INV_X1 cells:        9
ABC RESULTS:          NAND2_X1 cells:       49
ABC RESULTS:           NOR2_X1 cells:       26
ABC RESULTS:            OR2_X1 cells:        1
ABC RESULTS:        internal signals:       99
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        8
Removing temp directory.

7. Printing statistics.

=== shift_barrelfast_sright ===

   Number of wires:                166
   Number of wire bits:            338
   Number of public wires:          13
   Number of public wire bits:     107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     AND2_X1                         3
     BUF_X2                          1
     INV_X1                          9
     NAND2_X1                       49
     NOR2_X1                        26
     OR2_X1                          1

End of script. Logfile hash: bff9489b08
CPU: user 0.07s system 0.00s, MEM: 35.05 MB total, 8.88 MB resident
Yosys 0.5+ (git sha1 f13e387, gcc 5.2.1-22ubuntu2 -O2 -fstack-protector-strong -fPIC -Os)
Time spent: 23% 2x read_verilog (0 sec), 11% 4x opt_share (0 sec), ...
