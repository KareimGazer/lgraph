#!/bin/bash

TEMP=$(getopt -o r::,i::,l::,d --long reference::,implementation::,cell_library::,top::,yosys:: -n 'lgcheck' -- "$@")
eval set -- "$TEMP"

YOSYS=$(which yosys)
CELLLIB=""
OPT_TOP=""
OPT_DEBUG=""
while true ; do
    case "$1" in
        -r|--reference)
          case "$2" in
              "") shift 2 ;;
              *) GOLD=$2 ; shift 2 ;;
          esac ;;
        -i|--implementation)
          case "$2" in
              "") shift 2 ;;
              *) GATE=$2 ; shift 2 ;;
          esac ;;
        -l|--cell_library)
          case "$2" in
              "") shift 2 ;;
              *) CELLLIB=$2 ; shift 2 ;;
          esac ;;
        --yosys)
          case "$2" in
              "") shift 2 ;;
              *) YOSYS=$2 ; shift 2 ;;
          esac ;;
        --top)
          case "$2" in
              "") shift 2 ;;
              *) OPT_TOP=$2 ; shift 2 ;;
          esac ;;
        -d)
          shift 1 ;
          OPT_DEBUG=1 ;;
        --)
          shift
          break
          ;;
        *)
          echo "Option $1 not recognized!"
          exit 1
          ;;
    esac
done

if [ "${GOLD}" == "" ]; then
  echo "reference circuit not provided"
  exit 1
fi

if [ "${GATE}" == "" ]; then
  echo "implementation circuit not provided"
  exit 1
fi

if [ ! -f ${GOLD} ]; then
  echo "reference circuit file not found"
  exit 1
fi

if [ ! -f ${GATE} ]; then
  if [ -d ${GATE} ] ; then
    GATE=${GATE}/*
    echo "using directory ${GATE}"
  else
    echo "implementation circuit file not found"
    exit 1
  fi
fi

if [ ! -f "${YOSYS}" ]; then
  if [ -x "/usr/bin/yosys" ]; then
    YOSYS=/usr/bin/yosys
  elif [ -x "/usr/local/bin/yosys" ]; then
    YOSYS=/usr/local/bin/yosys
  else
    echo "lgcheck: unable to fix YOSYS path"
    exit 5
  fi
fi

if [ ! -f ${YOSYS} ]; then
  echo "Yosys binary not found"
  exit 1
fi

TOP_STR="-auto-top"
if [ "${OPT_TOP}" != "" ]; then
  TOP_STR="-top $OPT_TOP"
fi

if [ "${CELLLIB}" != "" ]; then
  if [ ! -f ${CELLLIB} ]; then
    echo "cell library ${CELLLIB} not found"
    exit 1
  fi
  lib="read_verilog ${CELLLIB}"
fi

#exit 2

yosys_read="read_verilog -sv ${GOLD}; hierarchy ${TOP_STR}; proc; flatten; rename -top gold; design -stash gold;
            read_verilog -sv ${GATE}; hierarchy ${TOP_STR}; proc; flatten; rename -top gate; design -stash gate;
            design -copy-from gold -as gold gold; design -copy-from gate -as gate gate; ${lib};"

yosys_prep="proc; memory -nomap; equiv_make gold gate equiv; prep -flatten -top equiv; hierarchy -top equiv; hierarchy -check; flatten; proc; opt_clean;"
yosys_prep_bb="proc; equiv_make gold gate equiv; hierarchy -top equiv; flatten; proc; opt_clean;"

yosys_equiv="equiv_simple; equiv_struct; equiv_simple; equiv_struct -icells; equiv_simple;"
yosys_equiv_extra="${yosys_simple}; equiv_simple -seq 5; equiv_induct -seq 5;"

#try fast script first, if it fails, goes to more complex one
if [ "$OPT_DEBUG" != "" ]; then
  echo "${YOSYS} -p \"${yosys_read}; ${yosys_prep}; ${yosys_equiv}; equiv_status -assert\""
fi
${YOSYS} -p "${yosys_read}; ${yosys_prep}; ${yosys_equiv}; equiv_status -assert" \
    2> /dev/null | grep "Equivalence successfully proven!"

if [ $? -eq 0 ]; then
  echo "Successfully matched ${GATE} with ${GOLD} top:${OPT_TOP}"
  exit 0
fi

${YOSYS} -p "${yosys_read}; ${yosys_prep_bb}; ${yosys_equiv}; equiv_status -assert" \
    2> /dev/null | grep "Equivalence successfully proven!"

if [ $? -eq 0 ]; then
  echo "Successfully matched ${GATE} with ${GOLD} top:${OPT_TOP} (module contain blackboxes)"
  exit 0
fi

${YOSYS} -p "${yosys_read};
    proc; memory -nomap; opt_expr -full; opt -purge; opt -purge;
    opt_reduce -full; opt_expr -mux_undef; opt_reduce; opt_merge; opt_clean -purge;
    ${yosys_prep}; opt -purge; proc; opt -purge; ${yosys_equiv}; equiv_status -assert" \
    | grep "Equivalence successfully proven!"

if [ $? -eq 0 ]; then
  echo "Successfully matched ${GATE} with ${GOLD} top:${OPT_TOP}"
  exit 0
fi

${YOSYS} -p "${yosys_read};
    memory -nomap; opt_expr -full; opt -purge; proc; opt -purge;
    opt_reduce -full; opt_expr -mux_undef; opt_reduce; opt_merge; opt_clean -purge; techmap -map +/adff2dff.v;
    ${yosys_prep}; opt -purge; proc; opt -purge; ${yosys_equiv_extra}; equiv_status -assert" \
    | grep "Equivalence successfully proven!"

if [ $? -eq 0 ]; then
  echo "Successfully matched ${GATE} with ${GOLD} top:${OPT_TOP}"
  exit 0
fi

${YOSYS} -p " read_verilog -sv ${GOLD}; hierarchy ${TOP_STR}; flatten ; opt ; prep; rename -top gold; design -stash gold;
              read_verilog -sv ${GATE}; hierarchy ${TOP_STR}; flatten ; opt ; prep; rename -top gate; design -stash gate;
              design -copy-from gold -as gold gold
              design -copy-from gate -as gate gate

              miter -equiv -make_assert -flatten gold gate equiv
              hierarchy -top equiv
              sat -prove-asserts -tempinduct -timeout 60 -ignore_unknown_cells -verify -set-init-undef equiv"
if [ $? -eq 0 ]; then
  echo "Successfully matched ${GATE} with ${GOLD} top:${OPT_TOP}"
  exit 0
fi

echo "WARN: Yosys failed to prove equivalency, trying to prove equivalency with Formality."

gate_top=`${YOSYS} -p "read_verilog ${GATE}; hierarchy ${TOP_STR}"  | grep "Top module" | tail -n1 | tr '\\\\' ' ' | awk '{print $3}'`
gold_top=`${YOSYS} -p "read_verilog ${GOLD}; hierarchy ${TOP_STR}"  | grep "Top module" | tail -n1 | tr '\\\\' ' ' | awk '{print $3}'`

if [ -z $FM_SHELL ]; then
  FM_SHELL=`which fm_shell`
  if [ $? -ne 0 ]; then
    echo "fm_shell not found, make sure fm_shell is in your path, or define the FM_SHELL environment variable"
    exit 1
  fi
fi

if [ ! -f ${FM_SHELL} ]; then
  echo "fm_shell not found, make sure fm_shell is in your path"
  exit 1
fi

echo "
    set_app_var synopsys_auto_setup true
    set_app_var hdlin_ignore_parallel_case false
    set_app_var hdlin_ignore_full_case false
    read_sverilog -r  \"${GOLD}\"
    set_top r:/WORK/${gold_top}
    read_sverilog -i  \"${GATE}\"
    set_top i:/WORK/${gate_top}
    match
    report_unmatched_points >> \"fm_${gold_top}_error.log\"
    if { ![verify] }  {
      report_failing_points >> \"fm_${gold_top}_error.log\"
        report_aborted >> \"fm_${gold_top}_error.log\"
        analyze_points -all >> \"fm_${gold_top}_error.log\"
    }
exit" > fm_script_${gold_top}.tcl

${FM_SHELL} -64bit -f fm_script_${gold_top}.tcl | grep "Verification SUCCEEDED"
if [ $? -eq 0 ]; then
  echo "Successfully matched ${GATE} with ${GOLD} top:${OPT_TOP}"
  exit 0
fi

echo "FAIL: circuits are not equivalent (${input}) with top:${OPT_TOP}"
exit 1
